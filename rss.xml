<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Codelog]]></title><description><![CDATA[A log of his daily coding activities]]></description><link>https://hagnerd.github.io/codelog</link><generator>RSS for Node</generator><lastBuildDate>Mon, 18 Feb 2019 17:56:14 GMT</lastBuildDate><item><title><![CDATA[001 - Hello, World]]></title><description><![CDATA[I decided to start this codelog because I feel as if my programming journey has
been a little scattered. I want to document (for myselfâ€¦]]></description><link>https://hagnerd.github.io/codelog/001-hello-world/</link><guid isPermaLink="false">https://hagnerd.github.io/codelog/001-hello-world/</guid><pubDate>Tue, 19 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I decided to start this codelog because I feel as if my programming journey has
been a little scattered. I want to document (for myself) where my journey has
taken me, what I have learned along the way, and the questions I have.&lt;/p&gt;
&lt;p&gt;The idea came to me while delving into a ReasonML codebase, and coming across a
syntax that Iâ€™ve seen repeatedly, but have never been formally introduced to. I
donâ€™t have a name for what it is, I have a hypothesis for what it does, but I
feel as if Iâ€™m not properly equipped to ask others about it.&lt;/p&gt;
&lt;p&gt;Here is a snippet with the syntax:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;re&quot;&gt;&lt;pre class=&quot;language-re&quot;&gt;&lt;code class=&quot;language-re&quot;&gt;module Counter = {
  let component = ReasonReact.component(&amp;quot;Counter&amp;quot;);

  let make = (~initial=0, _children) =&amp;gt; {
    ...component,
    render: _self =&amp;gt; {
      let (count, setCount) = ReactHooks.useState(initial);
      &amp;lt;div&amp;gt;
        {ReasonReact.string(string_of_int(count))}

        /* The syntax is the dot notation on the following line */
        &amp;lt;button onClick={_ =&amp;gt; setCount(. count + 1)}&amp;gt;

          {ReasonReact.string(&amp;quot;Click me&amp;quot;)}
        &amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;;
    },
  };
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here was my hypothesis: â€˜I believe that it is a shorthand syntax for
setCount(count =&gt; count + 1), because the similar updater function in JavaScript
flavored React expects either a replacement of state, or a function that is
passed the current state, and returns the updated stateâ€™.&lt;/p&gt;
&lt;p&gt;My test: I opened up sketch.sh (which is a really cool tool built for Ocaml and
ReasonML to test out snippets of code online) and implemented my own function that
would satisfy my hypothesis.&lt;/p&gt;
&lt;p&gt;The results: My hypothesis was absolutely incorrect. ðŸ¤” At this point, Iâ€™m at my wits end
so Iâ€™m going to hop into the ReasonML discord and hope that someone understands
my question.&lt;/p&gt;
&lt;p&gt;â€¦ Not even two minutes after asking someone told me itâ€™s a shorthand for
uncurrying an external function and provided me with a &lt;a href=&quot;https://bucklescript.github.io/docs/en/function#curry-uncurry&quot;&gt;documentation link&lt;/a&gt;. He
also encouraged that I ask any more questions if I have them. People in the discord are extremely nice, and welcoming. &lt;/p&gt;
&lt;p&gt;So what is this syntax?&lt;/p&gt;
&lt;p&gt;Because functions in ReasonML are auto-curried, and have a fixed arity, the
compiler knows if it has received the correct number of arguments ahead of time. When using ReasonML with Bucklescript you can essentially bridge back and forth between JavaScript, and ReasonML. JavaScript does not have strict arity for functions, and is not auto-curried. When using Bucklescript you will sometimes need to be aware of this, and account for it.&lt;/p&gt;
&lt;p&gt;The code above uses the JavaScript implementation of Reactâ€™s useState hook under
the hood, and thus needs to guarantee that it is NOT curried, and that the number of arguments supplied is the correct number of arguments. The paren-dot notation is a
shorthand for guaranteed-uncurrying in Bucklescript. You have to use it both at
the definition site, and call site, to make the compiler aware, and to satisfy
the safety of your usage.&lt;/p&gt;
&lt;p&gt;The library I was using is &lt;a href=&quot;https://github.com/eldh/bs-react&quot;&gt;bs-react&lt;/a&gt;. Which
is streamlined version of reason-react that supports React hooks and only
&lt;code class=&quot;language-text&quot;&gt;ReasonReact.statelessComponents&lt;/code&gt;, but is very
much in the early development stages.&lt;/p&gt;</content:encoded></item></channel></rss>