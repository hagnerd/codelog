{"data":{"site":{"siteMetadata":{"title":"Codelog","author":"Matt Hagner"}},"markdownRemark":{"id":"c045b57e-aa00-5337-973c-67dd61c2fdaf","excerpt":"I decided to start this codelog because I feel as if my programming journey has\nbeen a little scattered. I want to document (for myself) where my journey hasâ€¦","html":"<p>I decided to start this codelog because I feel as if my programming journey has\nbeen a little scattered. I want to document (for myself) where my journey has\ntaken me, what I have learned along the way, and the questions I have.</p>\n<p>The idea came to me while delving into a ReasonML codebase, and coming across a\nsyntax that Iâ€™ve seen repeatedly, but have never been formally introduced to. I\ndonâ€™t have a name for what it is, I have a hypothesis for what it does, but I\nfeel as if Iâ€™m not properly equipped to ask others about it.</p>\n<p>Here is a snippet with the syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"re\"><pre class=\"language-re\"><code class=\"language-re\">module Counter = {\n  let component = ReasonReact.component(&quot;Counter&quot;);\n\n  let make = (~initial=0, _children) =&gt; {\n    ...component,\n    render: _self =&gt; {\n      let (count, setCount) = ReactHooks.useState(initial);\n      &lt;div&gt;\n        {ReasonReact.string(string_of_int(count))}\n\n        /* The syntax is the dot notation on the following line */\n        &lt;button onClick={_ =&gt; setCount(. count + 1)}&gt;\n\n          {ReasonReact.string(&quot;Click me&quot;)}\n        &lt;/button&gt;\n      &lt;/div&gt;;\n    },\n  };\n};</code></pre></div>\n<p>Here was my hypothesis: â€˜I believe that it is a shorthand syntax for\nsetCount(count => count + 1), because the similar updater function in JavaScript\nflavored React expects either a replacement of state, or a function that is\npassed the current state, and returns the updated stateâ€™.</p>\n<p>My test: I opened up sketch.sh (which is a really cool tool built for Ocaml and\nReasonML to test out snippets of code online) and implemented my own function that\nwould satisfy my hypothesis.</p>\n<p>The results: My hypothesis was absolutely incorrect. ðŸ¤” At this point, Iâ€™m at my wits end\nso Iâ€™m going to hop into the ReasonML discord and hope that someone understands\nmy question.</p>\n<p>â€¦ Not even two minutes after asking someone told me itâ€™s a shorthand for\nuncurrying an external function and provided me with a <a href=\"https://bucklescript.github.io/docs/en/function#curry-uncurry\">documentation link</a>. He\nalso encouraged that I ask any more questions if I have them. People in the discord are extremely nice, and welcoming. </p>\n<p>So what is this syntax?</p>\n<p>Because functions in ReasonML are auto-curried, and have a fixed arity, the\ncompiler knows if it has received the correct number of arguments ahead of time. When using ReasonML with Bucklescript you can essentially bridge back and forth between JavaScript, and ReasonML. JavaScript does not have strict arity for functions, and is not auto-curried. When using Bucklescript you will sometimes need to be aware of this, and account for it.</p>\n<p>The code above uses the JavaScript implementation of Reactâ€™s useState hook under\nthe hood, and thus needs to guarantee that it is NOT curried, and that the number of arguments supplied is the correct number of arguments. The paren-dot notation is a\nshorthand for guaranteed-uncurrying in Bucklescript. You have to use it both at\nthe definition site, and call site, to make the compiler aware, and to satisfy\nthe safety of your usage.</p>\n<p>The library I was using is <a href=\"https://github.com/eldh/bs-react\">bs-react</a>. Which\nis streamlined version of reason-react that supports React hooks and only\n<code class=\"language-text\">ReasonReact.statelessComponents</code>, but is very\nmuch in the early development stages.</p>","frontmatter":{"title":"001 - Hello, World","date":"February 19, 2019"}}},"pageContext":{"slug":"/001-hello-world/","previous":null,"next":null}}